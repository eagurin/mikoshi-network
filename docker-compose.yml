networks:
  mikoshi-network:
    name: mikoshi-network
    driver: bridge
    attachable: true
    # ipam:
    #   driver: default
    #   config:
    #     - subnet: 172.28.0.0/16
    labels:
      - "com.docker.compose.recreate=always"

volumes:
  letsencrypt:
    name: letsencrypt
    external: true
  open-webui-data:
    name: open_webui_data
  pipelines-data:
    name: pipelines_data
    external: true
  ollama-data:
    name: ollama_data
    external: true

services:
  traefik:
    image: traefik:latest
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls.minVersion=VersionTLS10"
      - "--certificatesresolvers.myresolver.acme.email=goldmeat93@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--api.dashboard=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - mikoshi-network

  open-webui:
    build: .
    image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
    container_name: open-webui
    networks:
      mikoshi-network:
        aliases:
          - open-webui
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - PIPELINES_BASE_URL=http://pipelines:9099
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - NO_PROXY=${NO_PROXY}
      - ENABLE_RAG_WEB_SEARCH=True
      - RAG_WEB_SEARCH_ENGINE="searxng"
      - RAG_WEB_SEARCH_RESULT_COUNT=3
      - RAG_WEB_SEARCH_CONCURRENT_REQUESTS=10
      - SEARXNG_QUERY_URL="http://searxng:8080/search?q=<query>"
    ports:
      - "8080:8080"
    depends_on:
      - ollama
      - pipelines
      - tika
    volumes:
      - /mnt/storage/data:/app/backend/data
      - open-webui-data:/app/backend/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openwebui.rule=Host(`${DOMAIN_NAME:-domain.com}`)"
      - "traefik.http.routers.openwebui.entrypoints=websecure"
      - "traefik.http.routers.openwebui.tls.certresolver=myresolver"
      - "traefik.http.services.openwebui.loadbalancer.server.port=8080"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 24G
        reservations:
          cpus: '3.0'
          memory: 20G

  pipelines:
    build: .
    image: ghcr.io/open-webui/pipelines:main
    container_name: pipelines
    hostname: pipelines
    networks:
      mikoshi-network:
        aliases:
          - pipelines
    ports:
      - "9099:9099"
    volumes:
      - /mnt/storage/pipelines:/app/pipelines
      - pipelines-data:/app/pipelines
    environment:
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - NO_PROXY=${NO_PROXY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pipelines.rule=Host(`pipelines.${DOMAIN_NAME:-domain.com}`)"
      - "traefik.http.routers.pipelines.entrypoints=websecure"
      - "traefik.http.routers.pipelines.tls.certresolver=myresolver"
      - "traefik.http.services.pipelines.loadbalancer.server.port=9099"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9099/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    ports:
      - "8091:8091"
    volumes:
      - ./searxng:/etc/searxng
    restart: always

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ollama-data:/root/.ollama
    pull_policy: always
    tty: true
    networks:
      - mikoshi-network
    restart: always

  litellm:
    image: litellm/litellm:latest
    container_name: litellm
    ports:
      - "4000:4000"
    volumes:
      - /home/admin/mikoshi/config.yaml:/app/config.yaml
    environment:
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # Anthropic
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      # Azure
      - AZURE_AD_TOKEN=${AZURE_AD_TOKEN:-}
      - AZURE_AD_TOKEN_PROVIDER=${AZURE_AD_TOKEN_PROVIDER:-}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY:-}
      - AZURE_API_BASE=${AZURE_API_BASE:-}
      - AZURE_API_VERSION=${AZURE_API_VERSION:-}
      # Google Vertex AI
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS:-}
      - VERTEX_PROJECT=${VERTEX_PROJECT:-}
      - VERTEX_LOCATION=${VERTEX_LOCATION:-}
      # AWS Bedrock
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION_NAME=${AWS_REGION_NAME:-}
      # Groq
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      # Cohere
      - COHERE_API_KEY=${COHERE_API_KEY:-}
      # Anyscale
      - ANYSCALE_API_KEY=${ANYSCALE_API_KEY:-}
      # Ollama
      - OLLAMA_API_BASE=http://ollama:11434
      # - HTTP_PROXY=${HTTP_PROXY}
      # - HTTPS_PROXY=${HTTPS_PROXY}
      # - NO_PROXY=${NO_PROXY}
    networks:
      - mikoshi-network
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.litellm.rule=Host(`litellm.${DOMAIN_NAME:-domain.com}`)"
      - "traefik.http.routers.litellm.entrypoints=websecure"
      - "traefik.http.routers.litellm.tls.certresolver=myresolver"
      - "traefik.http.services.litellm.loadbalancer.server.port=4000"

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 300 open-webui pipelines ollama litellm
    environment:
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - NO_PROXY=${NO_PROXY}
    networks:
      - mikoshi-network
    restart: always

  tika:
    image: apache/tika:latest
    container_name: tika
    ports:
      - "9998:9998"
    networks:
      - mikoshi-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - /home/admin/mikoshi/prometheus.yml:/etc/prometheus/prometheus.yml
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME:-domain.com}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=myresolver"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    networks:
      - mikoshi-network
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME:-domain.com}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    networks:
      - mikoshi-network
    depends_on:
      - prometheus
    restart: always
